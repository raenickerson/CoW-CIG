[["index.html", "My semester project website Chapter 1 About", " My semester project website Rae Nickerson 2023-03-15 Chapter 1 About The CoW-CIG (Conservation on Workinglands Conservation Innovation Grant Team) is a group of livestock producers, researchers, graduate students, and NGO partners working together to evaluate the effectiveness of nonlethal tools at reducing conflicts between livestock, wolves, and grizzly bears. My work focuses on range riding - a tool where riders provide human presence among a livestock herd while monitoring and managing the activity of livestock and predators. This semester project will focus on organizing my database for all my different data sources, and if time permits, using game cameras to summarize predator activity across at least one ranch. "],["creating-my-database.html", "Chapter 2 Creating My Database Starting the Databse 2.1 Creating the cameras table 2.2 Creating the photos table", " Chapter 2 Creating My Database This chapter will focus on creating the database for my predator data. Sources of predator data include 1. my game cameras, 2. data from range rider data sheets, 3. data from range rider/ranch game cameras, and 4. data from wildlife agencies (sightings, collar data, and conflict data). Figure 2.1: Diagram Illustrating the Structure of the Database (Simona, can you not use pdf’s in RMD files? That might be why my figure isn’t showing, but I’ll be sure to ask you about it when I get back from the field) Unfortunately, I will only have my own camera data to analyze at this time, so will be focusing on the tables Cameras and Photos. Colored lines represent variables shared across tables. Starting the Databse I’ll start by loading the DBI and RSQLite packages: library(DBI) library(RSQLite) library(ggplot2) library(dplyr) Creating the database connection to my SQLite database cow_cig_db &lt;- dbConnect(RSQLite::SQLite(), &quot;CoW_CIG.db&quot;) 2.1 Creating the cameras table This table includes all information about deployed cameras at each field site, including camera serial numbers, personnel deployed, total pictures, height, percent cover at location, and more. The deploy_id column contains a unique identifier, and as such, is the primary key of the table. All tables in this study are connected by the ranch_id variable. dbExecute(cow_cig_db, &quot;CREATE TABLE cameras ( deploy_id integer PRIMARY KEY AUTOINCREMENT, camera_id varchar(10), ranch_id varchar(10), station_id varchar(5), date_deploy text, person_deploy varchar(10) CHECK (person_deploy IN (&#39;Rae&#39;, &#39;tech1&#39;, &#39;tech2&#39;)), date_pull text, person_remove varchar(10) CHECK (person_remove IN (&#39;Rae&#39;, &#39;tech1&#39;, &#39;tech2&#39;)), lat double, long double, pasture_id varchar(10), dist_target_m char(3), height_f char(3), width char(3), cover_percent char(20), direction varchar(20) CHECK (direction IN (&#39;N&#39;, &#39;S&#39;, &#39;E&#39;, &#39;W&#39;, &#39;NW&#39;, &#39;NE&#39;, &#39;SW&#39;, &#39;SE&#39;)), habitat varchar(20), lock char(1), S_B_date text, date_check text, person_check text CHECK (person_check IN (&#39;Rae&#39;, &#39;tech1&#39;, &#39;tech2&#39;)), total_pics char(20), pics_delete char(20), date_dead text, date_full text, FOREIGN KEY (ranch_id) REFERENCES ranches(ranch_id), FOREIGN KEY (camera_id) REFERENCES cameras(camera_id), FOREIGN KEY (person_deploy) REFERENCES cameras(person_deployed), FOREIGN KEY (pasture_id) REFERENCES pastures(pasture_id), FOREIGN KEY (person_remove) REFERENCES cameras(person_removed) );&quot;) Preview of the cameras table: ## [1] deploy_id camera_id ranch_id station_id date_deploy ## [6] person_deploy date_pull person_remove lat long ## [11] pasture_id dist_target_m height_f width cover_percent ## [16] direction habitat lock S_B_date date_check ## [21] person_check total_pics pics_delete date_dead date_full ## &lt;0 rows&gt; (or 0-length row.names) (Also, I’m not sure why this didn’t show up as an actual table, but I will work on that too when I get back. Could it be that there is no data in there yet?) 2.2 Creating the photos table This table includes all information related to each individual photo from all game cameras across sites, including observer name, behavior of the cattle in each photo, species, number of individuals, and more. The photo_id column contains a unique identifier, and as such, is the primary key of the table. dbExecute(cow_cig_db, &quot;CREATE TABLE photos ( photo_id integer PRIMARY KEY AUTOINCREMENT, ranch_id varchar(20), camera_id varchar(10), date text, observer_id varchar(10) CHECK (observer_id IN (&#39;Rae&#39;, &#39;tech1&#39;, &#39;tech2&#39;)), weather_id varchar(10), temp char(3), time char(4), lat double, long double, species_id varchar(10), pred_num char(3), num_other char(3), num_calves char(3), num_bulls char(3), num_cows char(3), num_cattle char(3), event char(5), event_start char(4), event_end char(4), eat_up_bulls char(3), eat_up_cows char(3), eat_up_calves char(3), eat_down_bulls char(3), eat_down_cows char(3), eat_down_calves char(3), stand_up_bulls char(3), stand_up_cows char(3), stand_up_calves char(3), stand_down_bulls char(3), stand_down_cows char(3), stand_down_calves char(3), walk_up_bulls char(3), walk_up_cows char(3), walk_up_calves char(3), walk_down_bulls char(3), walk_down_cows char(3), walk_down_calves char(3), lying_bulls char(3), lying_cows char(3), lying_calves char(3), running_bulls char(3), running_cows char(3), running_calves char(3), other_bulls char(3), other_cows char(3), other_calves char(3), dom_behav varchar(10), FOREIGN KEY (ranch_id) REFERENCES ranches(ranch_id), FOREIGN KEY (camera_id) REFERENCES cameras(camera_id), FOREIGN KEY (observer_id) REFERENCES cameras(observer_id), FOREIGN KEY (species_id) REFERENCES photos(species_id), FOREIGN KEY (num_calves) REFERENCES photos(num_calves), FOREIGN KEY (num_cows) REFERENCES photos(num_cows), FOREIGN KEY (num_bulls) REFERENCES photos(num_bulls), FOREIGN KEY (num_other) REFERENCES photos(num_other), FOREIGN KEY (num_cattle) REFERENCES photos(num_cattle), FOREIGN KEY (pred_num) REFERENCES photos(pred_num) );&quot;) Preview of the photos table: ## [1] photo_id ranch_id camera_id date ## [5] observer_id weather_id temp time ## [9] lat long species_id pred_num ## [13] num_other num_calves num_bulls num_cows ## [17] num_cattle event event_start event_end ## [21] eat_up_bulls eat_up_cows eat_up_calves eat_down_bulls ## [25] eat_down_cows eat_down_calves stand_up_bulls stand_up_cows ## [29] stand_up_calves stand_down_bulls stand_down_cows stand_down_calves ## [33] walk_up_bulls walk_up_cows walk_up_calves walk_down_bulls ## [37] walk_down_cows walk_down_calves lying_bulls lying_cows ## [41] lying_calves running_bulls running_cows running_calves ## [45] other_bulls other_cows other_calves dom_behav ## &lt;0 rows&gt; (or 0-length row.names) "],["cross.html", "Chapter 3 Cross-references 3.1 Chapters and sub-chapters 3.2 Captioned figures and tables", " Chapter 3 Cross-references Cross-references make it easier for your readers to find and link to elements in your book. 3.1 Chapters and sub-chapters There are two steps to cross-reference any heading: Label the heading: # Hello world {#nice-label}. Leave the label off if you like the automated heading generated based on your heading title: for example, # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the labeled heading anywhere in the text using \\@ref(nice-label); for example, please see Chapter 3. If you prefer text as the link instead of a numbered reference use: any text you want can go here. 3.2 Captioned figures and tables Figures and tables with captions can also be cross-referenced from elsewhere in your book using \\@ref(fig:chunk-label) and \\@ref(tab:chunk-label), respectively. See Figure 3.1. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 3.1: Here is a nice figure! Don’t miss Table 3.1. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 3.1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 "],["parts.html", "Chapter 4 Parts", " Chapter 4 Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", "Chapter 5 Footnotes and citations 5.1 Footnotes 5.2 Citations", " Chapter 5 Footnotes and citations 5.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one 1. 5.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2023) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References "],["blocks.html", "Chapter 6 Blocks 6.1 Equations 6.2 Theorems and proofs 6.3 Callout blocks", " Chapter 6 Blocks 6.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{6.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (6.1). 6.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 6.1. Theorem 6.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 6.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "Chapter 7 Sharing your book 7.1 Publishing 7.2 404 pages 7.3 Metadata for sharing", " Chapter 7 Sharing your book 7.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 7.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 7.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
