[["index.html", "My semester project website Chapter 1 About", " My semester project website Rae Nickerson 2023-04-24 Chapter 1 About The CoW-CIG (Conservation on Workinglands Conservation Innovation Grant Team) is a group of livestock producers, researchers, graduate students, and NGO partners working together to evaluate the effectiveness of nonlethal tools at reducing conflicts between livestock, wolves, and grizzly bears. My work focuses on range riding - a tool where riders provide human presence among a livestock herd while monitoring and managing the activity of livestock and predators. This semester project will focus on organizing my database, and visualizing predator presence across camera site locations from our pilot in eastern Washington. "],["creating-my-database.html", "Chapter 2 Creating My Database Starting the Databse Creating the database connection to my SQLite database 2.1 Creating the cameras table 2.2 Creating the photos table 2.3 Creating the WA_DM table (pilot data)", " Chapter 2 Creating My Database This chapter will focus on creating the database for my predator data. Sources of predator data include 1. my game cameras, 2. data from range rider data sheets, 3. data from range rider/ranch game cameras, and 4. data from wildlife agencies (sightings, collar data, and conflict data). Figure 2.1: Diagram Illustrating the Structure of the Database Unfortunately, I will only have camera data from our pilot to analyze at this time, so I will be focusing on a new table I created just for this task (not listed here in this database). However, when analyzing our actual data, I will be using the tables Cameras, Photos, Rides, and Predator_Agency to consolidate all predator data for a single season, by location. Colored lines represent variables shared across tables. Starting the Databse I’ll start by loading the DBI and RSQLite packages: library(DBI) library(RSQLite) library(ggplot2) library(tidyverse) library(dplyr) Creating the database connection to my SQLite database cow_cig_db &lt;- dbConnect(RSQLite::SQLite(), &quot;CoW_CIG.db&quot;) 2.1 Creating the cameras table This table includes all information about deployed cameras at each field site, including camera serial numbers, personnel deployed, total pictures, height, percent cover at location, and more. The deploy_id column contains a unique identifier, and as such, is the primary key of the table. All tables in this study are connected by the ranch_id variable. dbExecute(cow_cig_db, &quot;CREATE TABLE cameras ( deploy_id integer PRIMARY KEY AUTOINCREMENT, camera_id varchar(10), ranch_id varchar(10), station_id varchar(5), date_deploy text, person_deploy varchar(10) CHECK (person_deploy IN (&#39;Rae&#39;, &#39;tech1&#39;, &#39;tech2&#39;)), date_pull text, person_remove varchar(10) CHECK (person_remove IN (&#39;Rae&#39;, &#39;tech1&#39;, &#39;tech2&#39;)), lat double, long double, pasture_id varchar(10), dist_target_m char(3), height_f char(3), width char(3), cover_percent char(20), direction varchar(20) CHECK (direction IN (&#39;N&#39;, &#39;S&#39;, &#39;E&#39;, &#39;W&#39;, &#39;NW&#39;, &#39;NE&#39;, &#39;SW&#39;, &#39;SE&#39;)), habitat varchar(20), lock char(1), S_B_date text, date_check text, person_check text CHECK (person_check IN (&#39;Rae&#39;, &#39;tech1&#39;, &#39;tech2&#39;)), total_pics char(20), pics_delete char(20), date_dead text, date_full text, FOREIGN KEY (ranch_id) REFERENCES ranches(ranch_id), FOREIGN KEY (camera_id) REFERENCES cameras(camera_id), FOREIGN KEY (person_deploy) REFERENCES cameras(person_deployed), FOREIGN KEY (pasture_id) REFERENCES pastures(pasture_id), FOREIGN KEY (person_remove) REFERENCES cameras(person_removed) );&quot;) Preview of the cameras table: ## [1] deploy_id camera_id ranch_id station_id date_deploy ## [6] person_deploy date_pull person_remove lat long ## [11] pasture_id dist_target_m height_f width cover_percent ## [16] direction habitat lock S_B_date date_check ## [21] person_check total_pics pics_delete date_dead date_full ## &lt;0 rows&gt; (or 0-length row.names) 2.2 Creating the photos table This table includes all information related to each individual photo from all game cameras across sites, including observer name, behavior of the cattle in each photo, species, number of individuals, and more. The photo_id column contains a unique identifier, and as such, is the primary key of the table. dbExecute(cow_cig_db, &quot;CREATE TABLE photos ( photo_id integer PRIMARY KEY AUTOINCREMENT, ranch_id varchar(20), camera_id varchar(10), date text, observer_id varchar(10) CHECK (observer_id IN (&#39;Rae&#39;, &#39;tech1&#39;, &#39;tech2&#39;)), weather_id varchar(10), temp char(3), time char(4), lat double, long double, species_id varchar(10), pred_num char(3), num_other char(3), num_calves char(3), num_bulls char(3), num_cows char(3), num_cattle char(3), event char(5), event_start char(4), event_end char(4), eat_up_bulls char(3), eat_up_cows char(3), eat_up_calves char(3), eat_down_bulls char(3), eat_down_cows char(3), eat_down_calves char(3), stand_up_bulls char(3), stand_up_cows char(3), stand_up_calves char(3), stand_down_bulls char(3), stand_down_cows char(3), stand_down_calves char(3), walk_up_bulls char(3), walk_up_cows char(3), walk_up_calves char(3), walk_down_bulls char(3), walk_down_cows char(3), walk_down_calves char(3), lying_bulls char(3), lying_cows char(3), lying_calves char(3), running_bulls char(3), running_cows char(3), running_calves char(3), other_bulls char(3), other_cows char(3), other_calves char(3), dom_behav varchar(10), FOREIGN KEY (ranch_id) REFERENCES ranches(ranch_id), FOREIGN KEY (camera_id) REFERENCES cameras(camera_id), FOREIGN KEY (observer_id) REFERENCES cameras(observer_id), FOREIGN KEY (species_id) REFERENCES photos(species_id), FOREIGN KEY (num_calves) REFERENCES photos(num_calves), FOREIGN KEY (num_cows) REFERENCES photos(num_cows), FOREIGN KEY (num_bulls) REFERENCES photos(num_bulls), FOREIGN KEY (num_other) REFERENCES photos(num_other), FOREIGN KEY (num_cattle) REFERENCES photos(num_cattle), FOREIGN KEY (pred_num) REFERENCES photos(pred_num) );&quot;) Preview of the photos table: ## [1] photo_id ranch_id camera_id date ## [5] observer_id weather_id temp time ## [9] lat long species_id pred_num ## [13] num_other num_calves num_bulls num_cows ## [17] num_cattle event event_start event_end ## [21] eat_up_bulls eat_up_cows eat_up_calves eat_down_bulls ## [25] eat_down_cows eat_down_calves stand_up_bulls stand_up_cows ## [29] stand_up_calves stand_down_bulls stand_down_cows stand_down_calves ## [33] walk_up_bulls walk_up_cows walk_up_calves walk_down_bulls ## [37] walk_down_cows walk_down_calves lying_bulls lying_cows ## [41] lying_calves running_bulls running_cows running_calves ## [45] other_bulls other_cows other_calves dom_behav ## &lt;0 rows&gt; (or 0-length row.names) 2.3 Creating the WA_DM table (pilot data) This table includes all information about deployed cameras at our pilot field site in Washington from the summer of 2021, including photo id, date, camera model, camera id, station id, species, number of individuals, and number of individuals per photo event. The photo_id column contains a unique identifier, and as such, is the primary key of the table. dbExecute(cow_cig_db, &quot;CREATE TABLE WA_DM_F ( photo_id integer PRIMARY KEY AUTOINCREMENT, date_pic text, cam_model varchar(10), cam_id varchar(10), station_id varchar(10), species_id varchar(20), num char(20), num_individ_pics char(20) );&quot;) Preview of the pilot table: ## photo_id date_pic cam_model cam_id station_id species_id num ## 1 1 1 29/7/21 Browning 7196-12 CTWABD01B UNKNOWN ## 2 2 2 30/7/21 Browning 7196-12 CTWABD01B UNKNOWN ## 3 3 3 30/7/21 Browning 7196-12 CTWABD01B Coyote ## 4 4 4 4/8/21 Browning 7196-12 CTWABD01B squirrel ## 5 5 5 6/8/21 Browning 7196-12 CTWABD01B Coyote ## 6 6 6 6/8/21 Browning 7196-12 CTWABD01B squirrel ## 7 7 7 7/8/21 Browning 7196-12 CTWABD01B Coyote ## 8 8 8 14/8/21 Browning 7196-12 CTWABD01B BB ## 9 9 9 15/8/21 Browning 7196-12 CTWABD01B Grouse ## 10 10 10 16/8/21 Browning 7196-12 CTWABD01B Lagomorph ## 11 11 11 16/8/21 Browning 7196-12 CTWABD01B Grouse ## 12 12 12 16/8/21 Browning 7196-12 CTWABD01B BB ## 13 13 13 16/8/21 Browning 7196-12 CTWABD01B BB ## 14 14 14 18/8/21 Browning 7196-12 CTWABD01B Deer ## 15 15 15 18/8/21 Browning 7196-12 CTWABD01B BB ## 16 16 16 20/8/21 Browning 7196-12 CTWABD01B Lagomorph ## 17 17 17 21/8/21 Browning 7196-12 CTWABD01B BB ## 18 18 18 21/8/21 Browning 7196-12 CTWABD01B Moose ## 19 19 19 22/8/21 Browning 7196-12 CTWABD01B BB ## 20 20 20 23/8/21 Browning 7196-12 CTWABD01B Coyote ## num_individ_pics ## 1 1 ## 2 1 ## 3 1 ## 4 1 ## 5 1 ## 6 1 ## 7 1 ## 8 1 ## 9 1 ## 10 1 ## 11 1 ## 12 1 ## 13 1 ## 14 1 ## 15 1 ## 16 1 ## 17 1 ## 18 1 ## 19 1 ## 20 1 "],["brining-in-and-cleaning-my-data.html", "Chapter 3 Brining in, and cleaning my data 3.1 Brining in the pilot data 3.2 Cleaning the data", " Chapter 3 Brining in, and cleaning my data Since my pilot data did not focus on cattle behavioral analysis, there will be little to no data on cows. Instead, I will focus on cleaning my data for visualizing wild species presence across camera sites. This pilot was in eastern Washington (just outside Colville) and focused on comparing cameras placed at the center of each camera grid cell to those placed on roads, trails, or other sites where we would expect to see more wildlife use - with a focus on capturing wolf presence. 3.1 Brining in the pilot data WAP &lt;- dbGetQuery(cow_cig_db, &quot;SELECT * FROM WA_DM_F;&quot;) Alternative way to bring in the data: WAP &lt;- read.csv(&quot;WA_DM_Final.csv&quot;, na = &quot;NA&quot;) 3.2 Cleaning the data For some reason, R is reading in my csv file to have 99+ variables. So first I will remove all unneeded columns to just have the data collected, focusing on what might be useful later for data visulization. # species occurrence table S_O &lt;- WAP %&gt;% select(date_pic, cam_id, station_id, species_id, num_individ_pics) Notice that I selected the “num_individ_pics” column over the “num” column. This is because the “num_individ_pics” column show the number of individuals of a certain species per photo. For ranchers worried about predator pesence, knowing how many animals are around is important. Now let’s make sure our date column is being read correctly by R using Lubridate library(lubridate) S_O &lt;- S_O %&gt;% mutate(date_pic = ymd(date_pic)) class(S_O$date_pic) Next, let’s make sure all NA’s, UNKNONWS, and ?s are set to NA, and make sure our columns are the correct data class First, let’s check the class for each column (except date_pic which we’ve already dealt with) class(S_O$cam_id) class(S_O$station_id) class(S_O$species_id) class(S_O$num_individ_pics) Our num_individ_pics is the integar class, which is good, but our other variables need to be switched to as.factor so that we can categorize by cam_id, station_id, and species_id. S_O$station_id &lt;- as.factor(S_O$station_id) S_O$cam_id &lt;- as.factor(S_O$cam_id) S_O$species_id &lt;- as.factor(S_O$species_id) Now, let’s check that it worked class(S_O$station_id) class(S_O$species_id) class(S_O$cam_id) Next, let’s standardize all the different ways that species were written using tidyverse. S_O %&gt;% pull(species_id) %&gt;% unique() As you can see, we have a bit of a mess here. So the first thing we want to do is separate the information we need from the information we don’t. For example, we are only going to look at predator presence, so all other categories can be ignored (we will select for only predators later). But, we need to set all versions of predators to consistent naming - which includes BB (black bear), Lynx, coyote, Coyote, COYOTE, mountain lion, and Mountain Lion. First, will need to convert back to character, then set standard naming S_O$species_id &lt;- as.character(S_O$species_id) S_O &lt;- S_O %&gt;% mutate(species_id = if_else(species_id == &quot;mountain lion&quot;, &quot;Cougar&quot;, species_id)) %&gt;% mutate(species_id = if_else(species_id == &quot;Mountain Lion&quot;, &quot;Cougar&quot;, species_id)) %&gt;% mutate(species_id = if_else(species_id == &quot;lion&quot;, &quot;Cougar&quot;, species_id)) %&gt;% mutate(species_id = if_else(species_id == &quot;COYOTE&quot;, &quot;Coyote&quot;, species_id)) %&gt;% mutate(species_id = if_else(species_id == &quot;coyote&quot;, &quot;Coyote&quot;, species_id)) %&gt;% mutate(species_id = if_else(species_id == &quot;BB&quot;, &quot;Black Bear&quot;, species_id)) Now let’s change it back to factor, and check that it worked. ```{preds-check, eval = TRUE, echo = TRUE} S_O\\(species_id &lt;- as.factor(S_O\\)species_id) S_O %&gt;% pull(species_id) %&gt;% unique() Excellent! Now, let&#39;s check for distinct values in our other columns just to make sure there are no errors - specifically cam_id and num_individ_pics since we will be using those columns to visualize our predator presence across camera sites. ```distinct S_O %&gt;% pull(cam_id) %&gt;% unique() Looks like we have 12 different cameras, which means our other 8 cameras did not get photos of any animals at all (sad) Let’s do the same for the num_individ_pics columns S_O %&gt;% pull(num_individ_pics) %&gt;% unique() Looks like we have some NA values. To simplify our analysis, I’m going to remove any rows/values/observations with NA as the response. S_O &lt;- S_O %&gt;% filter(!is.na(num_individ_pics)) Great! Now our data is clean enough to start plotting - we have our predator species categorized cleanly into four species - Lynx, Cougar, Black Bear, and Coyote, our columns no longer contain missing data, and are the correct class. "],["visualizing-the-data.html", "Chapter 4 Visualizing the data 4.1 THE END! Thanks for a wonderful class, Simona, probably the most helpful graduate course I’ve ever taken. Good luck in Idaho! We will miss you.", " Chapter 4 Visualizing the data Now that the data is cleaned, I’d like to use tidyverse (including ggplot) to visualize my data. Specifically, I’d like to look at how predator presence varies across camera sites. First, I’ll select the columns I want to use, filter out only the predator species, then design my box plots. I will run them in 3 rounds so that the plot is not over crowded. library(tidyverse) plot &lt;- S_O %&gt;% select(species_id, cam_id, num_individ_pics) %&gt;% filter(cam_id %in% c(&quot;7196-12&quot;,&quot;7196-5&quot;, &quot;7196-12&quot;, &quot;4186-13&quot;)) %&gt;% filter(species_id %in% c(&quot;Cougar&quot;, &quot;Black Bear&quot;, &quot;Lynx&quot;, &quot;Coyote&quot;)) %&gt;% group_by(species_id, cam_id) %&gt;% ggplot(aes(x=species_id, y=num_individ_pics)) + geom_bar(stat = &quot;identity&quot;, fill = &quot;cyan&quot;) + facet_wrap(~ cam_id, nrow = 2) + labs(y = &quot;Total Number of Individuals&quot;, x = &quot;Predator Species&quot;) + ggtitle(&quot;Predator Presence at Camera X&quot;) + theme_bw() + theme(legend.position = &quot;bottom&quot;) plot Round 2 library(tidyverse) plot &lt;- S_O %&gt;% select(species_id, cam_id, num_individ_pics) %&gt;% filter(cam_id %in% c(&quot;4186-17&quot;, &quot;7196-11&quot;, &quot;4186-20&quot;, &quot;9164&quot;)) %&gt;% filter(species_id %in% c(&quot;Cougar&quot;, &quot;Black Bear&quot;, &quot;Lynx&quot;, &quot;Coyote&quot;)) %&gt;% group_by(species_id, cam_id) %&gt;% ggplot(aes(x=species_id, y=num_individ_pics)) + geom_bar(stat = &quot;identity&quot;, fill = &quot;cyan&quot;) + facet_wrap(~ cam_id, nrow = 2) + labs(y = &quot;Total Number of Individuals&quot;, x = &quot;Predator Species&quot;) + ggtitle(&quot;Predator Presence at Camera X&quot;) + theme_bw() + theme(legend.position = &quot;bottom&quot;) plot Round 3 library(tidyverse) plot &lt;- S_O %&gt;% select(species_id, cam_id, num_individ_pics) %&gt;% filter(cam_id %in% c(&quot;7196-2&quot;, &quot;7196-4&quot;, &quot;7196-6&quot;)) %&gt;% filter(species_id %in% c(&quot;Cougar&quot;, &quot;Black Bear&quot;, &quot;Lynx&quot;, &quot;Coyote&quot;)) %&gt;% group_by(species_id, cam_id) %&gt;% ggplot(aes(x=species_id, y=num_individ_pics)) + geom_bar(stat = &quot;identity&quot;, fill = &quot;cyan&quot;) + facet_wrap(~ cam_id, nrow = 2) + labs(y = &quot;Total Number of Individuals&quot;, x = &quot;Predator Species&quot;) + ggtitle(&quot;Predator Presence at Camera X&quot;) + theme_bw() + theme(legend.position = &quot;bottom&quot;) plot And we now get a beautiful series of bar plots showing how predator presence changes across camera locations. 4.1 THE END! Thanks for a wonderful class, Simona, probably the most helpful graduate course I’ve ever taken. Good luck in Idaho! We will miss you. "],["references.html", "References", " References "]]
